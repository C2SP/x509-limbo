"""
RFC 5280 Authority Key Identifier (AKI) testcases.
"""

from cryptography import x509
from cryptography.hazmat.primitives.asymmetric import ec

from limbo.models import Feature
from limbo.testcases._core import Builder, ext, testcase


@testcase
def critical_aki(builder: Builder) -> None:
    """
    Produces the following **invalid** chain:

    ```
    root -> EE
    ```

    The root cert has an AKI extension marked as critical, which is disallowed
    under [RFC 5280 4.2.1.1]:

    > Conforming CAs MUST mark this extension as non-critical.

    [RFC 5280 4.2.1.1]: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1
    """
    key = ec.generate_private_key(ec.SECP256R1())
    root = builder.root_ca(
        key=key,
        aki=ext(
            x509.AuthorityKeyIdentifier.from_issuer_public_key(key.public_key()), critical=True
        ),
    )
    leaf = builder.leaf_cert(root)

    builder = builder.server_validation()
    builder = builder.trusted_certs(root).peer_certificate(leaf).fails()


@testcase
def leaf_missing_aki(builder: Builder) -> None:
    """
    Produces the following **invalid** chain:

    ```
    root -> EE
    ```

    The EE cert is signed by the root but missing the AKI extension, which is
    forbidden under [RFC 5280 4.2.1.1].

    > The keyIdentifier field of the authorityKeyIdentifier extension MUST
    > be included in all certificates generated by conforming CAs to
    > facilitate certification path construction.

    [RFC 5280 4.2.1.1]: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1
    """
    root = builder.root_ca()
    leaf = builder.leaf_cert(root, aki=None)

    builder = builder.server_validation()
    builder.trusted_certs(root).peer_certificate(leaf).fails()


@testcase
def intermediate_missing_aki(builder: Builder) -> None:
    """
    Produces the following **invalid** chain:

    ```
    root -> intermediate -> EE
    ```

    The intermediate is signed by the root but missing the AKI extension, which
    is forbidden under [RFC 5280 4.2.1.1].

    > The keyIdentifier field of the authorityKeyIdentifier extension MUST
    > be included in all certificates generated by conforming CAs to
    > facilitate certification path construction.

    [RFC 5280 4.2.1.1]: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1
    """
    root = builder.root_ca()
    intermediate = builder.intermediate_ca(root, pathlen=0, aki=None)
    leaf = builder.leaf_cert(intermediate)

    builder = builder.server_validation()
    builder.trusted_certs(root).untrusted_intermediates(intermediate).peer_certificate(leaf).fails()


@testcase
def self_signed_root_missing_aki(builder: Builder) -> None:
    """
    Produces the following **valid** chain:

    ```
    root -> EE
    ```

    The root cert is missing the AKI extension, which is ordinarily forbidden
    under [RFC 5280 4.2.1.1] **unless** the certificate is self-signed,
    which this root is:

    > The keyIdentifier field of the authorityKeyIdentifier extension MUST
    > be included in all certificates generated by conforming CAs to
    > facilitate certification path construction.  There is one exception;
    > where a CA distributes its public key in the form of a "self-signed"
    > certificate, the authority key identifier MAY be omitted.

    [RFC 5280 4.2.1.1]: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1
    """
    root = builder.root_ca(aki=None)
    leaf = builder.leaf_cert(root)

    builder = builder.server_validation()
    builder = builder.trusted_certs(root).peer_certificate(leaf).succeeds()


@testcase
def cross_signed_root_missing_aki(builder: Builder) -> None:
    """
    Produces the following **invalid** chain:

    ```
    root -> EE
    ```

    The root is cross signed by another root but missing the AKI extension,
    which is ambiguous but potentially disallowed under [RFC 5280 4.2.1.1].

    > The keyIdentifier field of the authorityKeyIdentifier extension MUST
    > be included in all certificates generated by conforming CAs to
    > facilitate certification path construction.

    [RFC 5280 4.2.1.1]: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1
    """
    xsigner_root = builder.root_ca()
    root = builder.intermediate_ca(xsigner_root, pathlen=0, aki=None)
    leaf = builder.leaf_cert(root)

    builder = builder.server_validation().features([Feature.pedantic_rfc5280])
    builder.trusted_certs(root).peer_certificate(leaf).fails()
